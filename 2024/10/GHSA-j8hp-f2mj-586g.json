{
	"schema_version": "1.6.0",
	"id": "GHSA-j8hp-f2mj-586g",
	"modified": "2024-10-24T22:39:42.380349Z",
	"published": "2024-10-24T18:13:04Z",
	"aliases": [
		"CVE-2024-47882"
	],
	"summary": "OpenRefine's error page lacks escaping, leading to potential Cross-site Scripting on import of malicious project",
	"details": "### Summary\n\nThe built-in \"Something went wrong!\" error page includes the exception message and exception traceback without escaping HTML tags, enabling injection into the page if an attacker can reliably produce an error with an attacker-influenced message.\n\nIt appears that the only way to reach this code in OpenRefine itself is for an attacker to somehow convince a victim to import a malicious file, as in GHSA-m88m-crr9-jvqq, which may be difficult.  However, out-of-tree extensions may add their own calls to `respondWithErrorPage`.\n\n### Details\n\nThe `Command.respondWithErrorPage` (through `HttpUtilities.respondWithErrorPage`) function renders the Velocity template `error.vt`, which contains the `$message` and `$stack` variables, which are included in the response as-is:\n\nhttps://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53\n\nHowever, the message can contain HTML tags, which would then be interpreted by the browser. A mitigation would be to escape both the message and stack trace, perhaps using Guava's HTML escaper.\n\nFlows that report errors as `application/json` responses are not interpreted by the browser and so not affected by this issue.\n\n### PoC\n\nIn OpenRefine, use the \"Import project\" feature to import the following URL (or upload it as a file): https://wandernauta.nl/oa/example.tar.gz\n\nA JavaScript alert appears.\n\n### Impact\n\nExecution of arbitrary JavaScript in the victim's browser, provided the victim can be convinced to import a malicious project. The script can do anything the user can do.",
	"severity": [
		{
			"type": "CVSS_V3",
			"score": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:H/A:N"
		}
	],
	"affected": [
		{
			"package": {
				"ecosystem": "Maven",
				"name": "org.openrefine:openrefine",
				"purl": "pkg:maven/org.openrefine/openrefine"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "3.8.3"
						}
					]
				}
			],
			"versions": [
				"3.6-beta1",
				"3.6-beta2",
				"3.6-rc1",
				"3.6.0",
				"3.6.1",
				"3.6.2",
				"3.7-beta1",
				"3.7-beta2",
				"3.7.0",
				"3.7.2",
				"3.8-beta1",
				"3.8-beta5",
				"3.8.0",
				"3.8.1",
				"3.8.2"
			],
			"database_specific": {
				"source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2024/10/GHSA-j8hp-f2mj-586g/GHSA-j8hp-f2mj-586g.json"
			}
		}
	],
	"references": [
		{
			"type": "WEB",
			"url": "https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-j8hp-f2mj-586g"
		},
		{
			"type": "ADVISORY",
			"url": "https://nvd.nist.gov/vuln/detail/CVE-2024-47882"
		},
		{
			"type": "WEB",
			"url": "https://github.com/OpenRefine/OpenRefine/commit/85594e75e7b36025f7b6a67dcd3ec253c5dff8c2"
		},
		{
			"type": "PACKAGE",
			"url": "https://github.com/OpenRefine/OpenRefine"
		},
		{
			"type": "WEB",
			"url": "https://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53"
		}
	],
	"database_specific": {
		"cwe_ids": [
			"CWE-79",
			"CWE-81"
		],
		"github_reviewed": true,
		"github_reviewed_at": "2024-10-24T18:13:04Z",
		"nvd_published_at": "2024-10-24T21:15:13Z",
		"severity": "MODERATE"
	}
}
